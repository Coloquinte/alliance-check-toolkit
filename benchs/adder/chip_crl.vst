-- Entity Declaration

ENTITY chip_crl IS
  PORT (
  ck : in BIT ;
  a : in BIT_VECTOR (3 downto 0) ;
  b : in BIT_VECTOR (3 downto 0) ;
  f : out BIT_VECTOR (3 downto 0) ;
  vdde : in BIT ;	-- vdd
  vsse : in BIT ;	-- vdd
  vddi: in BIT ;	-- vdd
  vssi: in BIT 	-- vss
  );
END chip_crl;

-- Architecture Declaration

ARCHITECTURE VST OF chip_crl IS

Component adder_crl
  PORT (
  m_clock : in BIT ;
  p_reset : in BIT ;
  a : in BIT_VECTOR (3 downto 0) ;
  b : in BIT_VECTOR (3 downto 0) ;
  f : out BIT_VECTOR (3 downto 0) ;
  vdd : in BIT ;	-- vdd
  vss : in BIT 	-- vss
  );
END component;

Component pck_mpx
  port (
  pad : in BIT;	-- pad
  ck : out BIT;	-- ck
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

Component pi_mpx
  port (
  pad : in BIT;	-- pad
  t : out BIT;	-- t
  ck : in BIT;	-- ck
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

Component pvddeck_mpx
  port (
--   pad : in BIT;	-- pad
--   t : out BIT;	-- t
  ck : in BIT;	-- ck
  cko : out mux_bit bus;	-- cko
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

Component pvsseck_mpx
  port (
--   pad : in BIT;	-- pad
--   t : out BIT;	-- t
  ck : in BIT;	-- ck
  cko : out mux_bit bus;	-- cko
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

Component pvddick_mpx
  port (
--   pad : in BIT;	-- pad
--   t : out BIT;	-- t
  ck : in BIT;	-- ck
  cko : out mux_bit bus;	-- cko
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

Component pvssick_mpx
  port (
--   pad : in BIT;	-- pad
--   t : out BIT;	-- t
  ck : in BIT;	-- ck
  cko : out mux_bit bus;	-- cko
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

Component po_mpx
  port (
  i : in BIT;	-- t
  pad : out BIT;	-- pad
  ck : in BIT;	-- ck
  vdde : in BIT;	-- vdde
  vddi : in BIT;	-- vddi
  vsse : in BIT;	-- vsse
  vssi : in BIT	-- vssi
 );
end component;

signal a_i : bit_vector ( 3 downto 0);
signal b_i : bit_vector ( 3 downto 0);
signal f_i : bit_vector ( 3 downto 0);
signal cki : bit;
signal ckc : bit;


BEGIN

core : adder_crl
  port map (
  a => a_i,
  b => b_i,
  f => f_i,
  m_clock => ckc,
  p_reset => vssi,
  vdd => vddi,
  vss => vssi
  );

p_ck: pck_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      pad  => ck,
      ck=>cki
   );

p_vdde: pvddeck_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      cko  => ckc,
      ck=>cki
   );

p_vsse: pvsseck_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      cko  => ckc,
      ck=>cki
   );


p_vddi: pvddick_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      cko  => ckc,
      ck=>cki
   );

p_vssi: pvssick_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      cko  => ckc,
      ck=>cki
   );

p_a0 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck=>cki,
      pad  => a(0),
      t    => a_i(0)
   );

p_a1 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => a(1),
      t    => a_i(1)
   );

p_a2 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => a(2),
      t    => a_i(2)
   );

p_a3 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => a(3),
      t    => a_i(3)
   );

p_b0 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => b(0),
      t    => b_i(0)
   );

p_b1 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => b(1),
      t    => b_i(1)
   );

p_b2 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => b(2),
      t    => b_i(2)
   );

p_b3 : pi_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => b(3),
      t    => b_i(3)
   );

p_f0 : po_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => f(0),
      i    => f_i(0)
   );

p_f1 : po_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => f(1),
      i    => f_i(1)
   );

p_f2 : po_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => f(2),
      i    => f_i(2)
   );

p_f3 : po_mpx
   port map (
      vdde  => vdde,
      vddi  => vddi,
      vsse  => vsse,
      vssi  => vssi,
      ck    => cki,
      pad  => f(3),
      i    => f_i(3)
   );

end VST;
