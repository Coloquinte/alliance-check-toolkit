
-- =======================================================================
-- Coriolis Structural VHDL Driver
-- Generated on Feb 19, 2019, 11:14
-- 
-- To be interoperable with Alliance, it uses it's special VHDL subset.
-- ("man vhdl" under Alliance for more informations)
-- =======================================================================

entity coeur is
  port ( cin_from_pads : in bit
       ; ck            : in bit
       ; noe_from_pads : in bit
       ; q0_from_pads  : in bit
       ; q3_from_pads  : in bit
       ; r0_from_pads  : in bit
       ; r3_from_pads  : in bit
       ; a_from_pads   : in bit_vector(3 downto 0)
       ; b_from_pads   : in bit_vector(3 downto 0)
       ; d_from_pads   : in bit_vector(3 downto 0)
       ; i_from_pads   : in bit_vector(8 downto 0)
       ; cout_to_pads  : out bit
       ; f3_to_pads    : out bit
       ; ng_to_pads    : out bit
       ; np_to_pads    : out bit
       ; ovr_to_pads   : out bit
       ; q0_to_pads    : out bit
       ; q3_to_pads    : out bit
       ; r0_to_pads    : out bit
       ; r3_to_pads    : out bit
       ; shift_l       : out bit
       ; shift_r       : out bit
       ; y_oe          : out bit
       ; zero_to_pads  : out bit
       ; y_to_pads     : out bit_vector(3 downto 0)
       ; vdd           : in bit
       ; vss           : in bit
       );
end coeur;

architecture structural of coeur is

  component muxs
    port ( noe     : in bit
         ; i       : in bit_vector(2 downto 0)
         ; alu_out : in bit_vector(3 downto 0)
         ; ra      : in bit_vector(3 downto 0)
         ; oe      : out bit
         ; shift_l : out bit
         ; shift_r : out bit
         ; y       : out mux_vector(3 downto 0) bus
         ; vdd     : in bit
         ; vss     : in bit
         );
  end component;

  component alu
    port ( cin     : in bit
         ; i       : in bit_vector(2 downto 0)
         ; r       : in bit_vector(3 downto 0)
         ; s       : in bit_vector(3 downto 0)
         ; cout    : out bit
         ; f3      : out bit
         ; ng      : out bit
         ; np      : out bit
         ; ovr     : out bit
         ; zero    : out bit
         ; alu_out : inout bit_vector(3 downto 0)
         ; vdd     : in bit
         ; vss     : in bit
         );
  end component;

  component accu
    port ( cke     : in bit
         ; q0_from : in bit
         ; q3_from : in bit
         ; i       : in bit_vector(2 downto 0)
         ; alu_out : in bit_vector(3 downto 0)
         ; q0_to   : out mux_bit bus
         ; q3_to   : out mux_bit bus
         ; accu    : inout bit_vector(3 downto 0)
         ; vdd     : in bit
         ; vss     : in bit
         );
  end component;

  component ram
    port ( clk          : in bit
         ; r0_from_pads : in bit
         ; r3_from_pads : in bit
         ; i            : in bit_vector(2 downto 0)
         ; a            : in bit_vector(3 downto 0)
         ; alu_out      : in bit_vector(3 downto 0)
         ; b            : in bit_vector(3 downto 0)
         ; r0_to_pads   : out bit
         ; r3_to_pads   : out bit
         ; ra           : out bit_vector(3 downto 0)
         ; rb           : out bit_vector(3 downto 0)
         ; vdd          : in bit
         ; vss          : in bit
         );
  end component;

  component muxe
    port ( i    : in bit_vector(2 downto 0)
         ; accu : in bit_vector(3 downto 0)
         ; d    : in bit_vector(3 downto 0)
         ; ra   : in bit_vector(3 downto 0)
         ; rb   : in bit_vector(3 downto 0)
         ; r    : out bit_vector(3 downto 0)
         ; s    : out bit_vector(3 downto 0)
         ; vdd  : in bit
         ; vss  : in bit
         );
  end component;

  signal alu_out :  bit_vector(3 downto 0);
  signal r       :  bit_vector(3 downto 0);
  signal ra      :  bit_vector(3 downto 0);
  signal rb      :  bit_vector(3 downto 0);
  signal s       :  bit_vector(3 downto 0);
  signal saccu   :  bit_vector(3 downto 0);


begin

  iram : ram
  port map ( clk          => ck
           , r0_from_pads => r0_from_pads
           , r3_from_pads => r3_from_pads
           , i            => i_from_pads(8 downto 6)
           , a            => a_from_pads(3 downto 0)
           , alu_out      => alu_out(3 downto 0)
           , b            => b_from_pads(3 downto 0)
           , r0_to_pads   => r0_to_pads
           , r3_to_pads   => r3_to_pads
           , ra           => ra(3 downto 0)
           , rb           => rb(3 downto 0)
           , vdd          => vdd
           , vss          => vss
           );

  iaccu : accu
  port map ( cke     => ck
           , q0_from => q0_from_pads
           , q3_from => q3_from_pads
           , i       => i_from_pads(8 downto 6)
           , alu_out => alu_out(3 downto 0)
           , q0_to   => q0_to_pads
           , q3_to   => q3_to_pads
           , accu    => saccu(3 downto 0)
           , vdd     => vdd
           , vss     => vss
           );

  ialu : alu
  port map ( cin     => cin_from_pads
           , i       => i_from_pads(5 downto 3)
           , r       => r(3 downto 0)
           , s       => s(3 downto 0)
           , cout    => cout_to_pads
           , f3      => f3_to_pads
           , ng      => ng_to_pads
           , np      => np_to_pads
           , ovr     => ovr_to_pads
           , zero    => zero_to_pads
           , alu_out => alu_out(3 downto 0)
           , vdd     => vdd
           , vss     => vss
           );

  imuxs : muxs
  port map ( noe     => noe_from_pads
           , i       => i_from_pads(8 downto 6)
           , alu_out => alu_out(3 downto 0)
           , ra      => ra(3 downto 0)
           , oe      => y_oe
           , shift_l => shift_l
           , shift_r => shift_r
           , y       => y_to_pads(3 downto 0)
           , vdd     => vdd
           , vss     => vss
           );

  imuxe : muxe
  port map ( i    => i_from_pads(2 downto 0)
           , accu => saccu(3 downto 0)
           , d    => d_from_pads(3 downto 0)
           , ra   => ra(3 downto 0)
           , rb   => rb(3 downto 0)
           , r    => r(3 downto 0)
           , s    => s(3 downto 0)
           , vdd  => vdd
           , vss  => vss
           );

end structural;

