
-- =======================================================================
-- Coriolis Structural VHDL Driver
-- Generated on Jan 09, 2018, 14:44
-- 
-- To be interoperable with Alliance, it uses it's special VHDL subset.
-- ("man vhdl" under Alliance for more informations)
-- =======================================================================

entity decoder is
  port ( command : in bit_vector(2 downto 0)
       ; vc      : out bit_vector(7 downto 1)
       ; vdd     : in bit
       ; vss     : in bit
       );
end decoder;

architecture structural of decoder is

  component inv_x2
    port ( i   : in bit
         ; nq  : out bit
         ; vdd : in bit
         ; vss : in bit
         );
  end component;

  component no3_x1
    port ( i0  : in bit
         ; i1  : in bit
         ; i2  : in bit
         ; nq  : out bit
         ; vdd : in bit
         ; vss : in bit
         );
  end component;

  component a3_x2
    port ( i0  : in bit
         ; i1  : in bit
         ; i2  : in bit
         ; q   : out bit
         ; vdd : in bit
         ; vss : in bit
         );
  end component;

  component rowend_x0
    port ( vdd : in bit
         ; vss : in bit
         );
  end component;

  signal not_command :  bit_vector(2 downto 0);


begin

  feed_10 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_9 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_8 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_7 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_6 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_5 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_4 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_3 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_2 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_1 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  not_command_2_ins : inv_x2
  port map ( i   => command(2)
           , nq  => not_command(2)
           , vdd => vdd
           , vss => vss
           );

  not_command_1_ins : inv_x2
  port map ( i   => command(1)
           , nq  => not_command(1)
           , vdd => vdd
           , vss => vss
           );

  not_command_0_ins : inv_x2
  port map ( i   => command(0)
           , nq  => not_command(0)
           , vdd => vdd
           , vss => vss
           );

  vc_1_ins : no3_x1
  port map ( i0  => command(2)
           , i1  => not_command(0)
           , i2  => command(1)
           , nq  => vc(1)
           , vdd => vdd
           , vss => vss
           );

  vc_2_ins : no3_x1
  port map ( i0  => not_command(1)
           , i1  => command(0)
           , i2  => command(2)
           , nq  => vc(2)
           , vdd => vdd
           , vss => vss
           );

  vc_3_ins : no3_x1
  port map ( i0  => not_command(1)
           , i1  => not_command(0)
           , i2  => command(2)
           , nq  => vc(3)
           , vdd => vdd
           , vss => vss
           );

  vc_4_ins : no3_x1
  port map ( i0  => not_command(2)
           , i1  => command(1)
           , i2  => command(0)
           , nq  => vc(4)
           , vdd => vdd
           , vss => vss
           );

  vc_5_ins : no3_x1
  port map ( i0  => not_command(2)
           , i1  => not_command(0)
           , i2  => command(1)
           , nq  => vc(5)
           , vdd => vdd
           , vss => vss
           );

  vc_6_ins : no3_x1
  port map ( i0  => not_command(2)
           , i1  => not_command(1)
           , i2  => command(0)
           , nq  => vc(6)
           , vdd => vdd
           , vss => vss
           );

  vc_7_ins : a3_x2
  port map ( i0  => command(1)
           , i1  => command(2)
           , i2  => command(0)
           , q   => vc(7)
           , vdd => vdd
           , vss => vss
           );

  feed_0 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_44 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_43 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_42 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_41 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_40 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_39 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_38 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_37 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_36 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_35 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_34 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_33 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_32 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_31 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_11 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_12 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_13 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_14 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_15 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_16 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_17 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_18 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_19 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_20 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_21 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_22 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_23 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_24 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_25 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_26 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_27 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_28 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_29 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

  feed_30 : rowend_x0
  port map ( vdd => vdd
           , vss => vss
           );

end structural;

