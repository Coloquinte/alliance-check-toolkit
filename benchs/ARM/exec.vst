--
-- Generated by VASY
--
ENTITY exec IS
PORT(
  dec2exe_empty	: IN BIT;
  exe_pop	: OUT BIT;
  dec_op1	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: IN BIT;
  dec_flag_wb	: IN BIT;
  dec_pre_index	: IN BIT;
  dec_mem_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_mem_lw	: IN BIT;
  dec_mem_lb	: IN BIT;
  dec_mem_sw	: IN BIT;
  dec_mem_sb	: IN BIT;
  dec_shift_lsl	: IN BIT;
  dec_shift_lsr	: IN BIT;
  dec_shift_asr	: IN BIT;
  dec_shift_ror	: IN BIT;
  dec_shift_rrx	: IN BIT;
  dec_shift_val	: IN BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: IN BIT;
  dec_comp_op1	: IN BIT;
  dec_comp_op2	: IN BIT;
  dec_alu_cy	: IN BIT;
  dec_alu_add	: IN BIT;
  dec_alu_and	: IN BIT;
  dec_alu_or	: IN BIT;
  dec_alu_xor	: IN BIT;
  exe_res	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_c	: OUT BIT;
  exe_v	: OUT BIT;
  exe_n	: OUT BIT;
  exe_z	: OUT BIT;
  exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: OUT BIT;
  exe_flag_wb	: OUT BIT;
  exe_mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_mem_lw	: OUT BIT;
  exe_mem_lb	: OUT BIT;
  exe_mem_sw	: OUT BIT;
  exe_mem_sb	: OUT BIT;
  exe2mem_empty	: OUT BIT;
  mem_pop	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END exec;

ARCHITECTURE VST OF exec IS

  SIGNAL exe_push	: BIT;
  SIGNAL exe_full	: BIT;
  SIGNAL fifo_din	: BIT_VECTOR(71 DOWNTO 0);
  SIGNAL fifo_dout	: BIT_VECTOR(71 DOWNTO 0);
  SIGNAL shifter_op2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL shifter_cy	: BIT;
  SIGNAL comp_op1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL comp_op2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL alu_res	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL alu_cy	: BIT;
  COMPONENT exec_model
  PORT(
  dec2exe_empty	: IN BIT;
  exe_pop	: OUT BIT;
  dec_op1	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: IN BIT;
  dec_flag_wb	: IN BIT;
  dec_pre_index	: IN BIT;
  dec_mem_data	: IN BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  dec_mem_lw	: IN BIT;
  dec_mem_lb	: IN BIT;
  dec_mem_sw	: IN BIT;
  dec_mem_sb	: IN BIT;
  dec_comp_op1	: IN BIT;
  dec_comp_op2	: IN BIT;
  dec_alu_add	: IN BIT;
  exe_res	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_c	: OUT BIT;
  exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: OUT BIT;
  exe_flag_wb	: OUT BIT;
  exe_mem_adr	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  exe_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  exe_mem_lw	: OUT BIT;
  exe_mem_lb	: OUT BIT;
  exe_mem_sw	: OUT BIT;
  exe_mem_sb	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  alu_cy	: IN BIT;
  alu_res	: IN BIT_VECTOR(31 DOWNTO 0);
  comp_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  comp_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  shifter_cy	: IN BIT;
  shifter_op2	: IN BIT_VECTOR(31 DOWNTO 0);
  fifo_dout	: IN BIT_VECTOR(71 DOWNTO 0);
  fifo_din	: OUT BIT_VECTOR(71 DOWNTO 0);
  exe_full	: IN BIT;
  exe_push	: OUT BIT
  );
  END COMPONENT;

  COMPONENT fifo72
  PORT(
  din	: IN BIT_VECTOR(71 DOWNTO 0);
  dout	: OUT BIT_VECTOR(71 DOWNTO 0);
  push	: IN BIT;
  pop	: IN BIT;
  full	: OUT BIT;
  empty	: OUT BIT;
  reset_n	: IN BIT;
  ck	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT shifter
  PORT(
  op2	: IN BIT_VECTOR(31 DOWNTO 0);
  shift	: IN BIT_VECTOR(4 DOWNTO 0);
  cin	: IN BIT;
  res	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT;
  cmd_lsl	: IN BIT;
  cmd_lsr	: IN BIT;
  cmd_asr	: IN BIT;
  cmd_ror	: IN BIT;
  cmd_rrx	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT alu
  PORT(
  op1	: IN BIT_VECTOR(31 DOWNTO 0);
  op2	: IN BIT_VECTOR(31 DOWNTO 0);
  cin	: IN BIT;
  cmd_add	: IN BIT;
  cmd_and	: IN BIT;
  cmd_or	: IN BIT;
  cmd_xor	: IN BIT;
  res	: OUT BIT_VECTOR(31 DOWNTO 0);
  cout	: OUT BIT;
  z	: OUT BIT;
  n	: OUT BIT;
  v	: OUT BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  exec_inst : exec_model
  PORT MAP (
    dec2exe_empty => dec2exe_empty,
    exe_pop => exe_pop,
    dec_op1 => dec_op1,
    dec_exe_dest => dec_exe_dest,
    dec_exe_wb => dec_exe_wb,
    dec_flag_wb => dec_flag_wb,
    dec_pre_index => dec_pre_index,
    dec_mem_data => dec_mem_data,
    dec_mem_dest => dec_mem_dest,
    dec_mem_lw => dec_mem_lw,
    dec_mem_lb => dec_mem_lb,
    dec_mem_sw => dec_mem_sw,
    dec_mem_sb => dec_mem_sb,
    dec_comp_op1 => dec_comp_op1,
    dec_comp_op2 => dec_comp_op2,
    dec_alu_add => dec_alu_add,
    exe_res => exe_res,
    exe_c => exe_c,
    exe_dest => exe_dest,
    exe_wb => exe_wb,
    exe_flag_wb => exe_flag_wb,
    exe_mem_adr => exe_mem_adr,
    exe_mem_data => exe_mem_data,
    exe_mem_dest => exe_mem_dest,
    exe_mem_lw => exe_mem_lw,
    exe_mem_lb => exe_mem_lb,
    exe_mem_sw => exe_mem_sw,
    exe_mem_sb => exe_mem_sb,
    vdd => vdd,
    vss => vss,
    alu_cy => alu_cy,
    alu_res => alu_res,
    comp_op2 => comp_op2,
    comp_op1 => comp_op1,
    shifter_cy => shifter_cy,
    shifter_op2 => shifter_op2,
    fifo_dout => fifo_dout,
    fifo_din => fifo_din,
    exe_full => exe_full,
    exe_push => exe_push
  );
  fifo_0 : fifo72
  PORT MAP (
    din(71 downto 0) => fifo_din,
    dout(71 downto 0) => fifo_dout,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    empty => exe2mem_empty,
    pop => mem_pop,
    full => exe_full,
    push => exe_push
  );
  shifter_0 : shifter
  PORT MAP (
    op2(31 downto 0) => dec_op2,
    shift(4 downto 0) => dec_shift_val,
    res(31 downto 0) => shifter_op2,
    vss => vss,
    vdd => vdd,
    cmd_rrx => dec_shift_rrx,
    cmd_ror => dec_shift_ror,
    cmd_asr => dec_shift_asr,
    cmd_lsr => dec_shift_lsr,
    cmd_lsl => dec_shift_lsl,
    cout => shifter_cy,
    cin => dec_cy
  );
  alu_0 : alu
  PORT MAP (
    op1(31 downto 0) => comp_op1,
    op2(31 downto 0) => comp_op2,
    res(31 downto 0) => alu_res,
    vss => vss,
    vdd => vdd,
    cmd_xor => dec_alu_xor,
    cmd_or => dec_alu_or,
    cmd_and => dec_alu_and,
    cmd_add => dec_alu_add,
    v => exe_v,
    n => exe_n,
    z => exe_z,
    cout => alu_cy,
    cin => dec_alu_cy
  );
END VST;
