--
-- Generated by VASY
--
ENTITY decod IS
PORT(
  dec_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: OUT BIT;
  dec_flag_wb	: OUT BIT;
  dec_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: OUT BIT;
  dec_mem_lw	: OUT BIT;
  dec_mem_lb	: OUT BIT;
  dec_mem_sw	: OUT BIT;
  dec_mem_sb	: OUT BIT;
  dec_shift_lsl	: OUT BIT;
  dec_shift_lsr	: OUT BIT;
  dec_shift_asr	: OUT BIT;
  dec_shift_ror	: OUT BIT;
  dec_shift_rrx	: OUT BIT;
  dec_shift_val	: OUT BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: OUT BIT;
  dec_comp_op1	: OUT BIT;
  dec_comp_op2	: OUT BIT;
  dec_alu_cy	: OUT BIT;
  dec2exe_empty	: OUT BIT;
  exe_pop	: IN BIT;
  dec_alu_add	: OUT BIT;
  dec_alu_and	: OUT BIT;
  dec_alu_or	: OUT BIT;
  dec_alu_xor	: OUT BIT;
  exe_res	: IN BIT_VECTOR(31 DOWNTO 0);
  exe_c	: IN BIT;
  exe_v	: IN BIT;
  exe_n	: IN BIT;
  exe_z	: IN BIT;
  exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: IN BIT;
  exe_flag_wb	: IN BIT;
  dec_pc	: OUT BIT_VECTOR(31 DOWNTO 0);
  if_ir	: IN BIT_VECTOR(31 DOWNTO 0);
  dec2if_empty	: OUT BIT;
  if_pop	: IN BIT;
  if2dec_empty	: IN BIT;
  dec_pop	: OUT BIT;
  mem_res	: IN BIT_VECTOR(31 DOWNTO 0);
  mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  mem_wb	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
);
END decod;

ARCHITECTURE VST OF decod IS

  SIGNAL bl_i	: BIT;
  SIGNAL rdata1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL radr1	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rvalid1	: BIT;
  SIGNAL rdata2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL radr2	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rvalid2	: BIT;
  SIGNAL rdata3	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL radr3	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL rvalid3	: BIT;
  SIGNAL cry	: BIT;
  SIGNAL zero	: BIT;
  SIGNAL neg	: BIT;
  SIGNAL ovr	: BIT;
  SIGNAL reg_cznv	: BIT;
  SIGNAL reg_vv	: BIT;
  SIGNAL reg_pc	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL reg_pcv	: BIT;
  SIGNAL inc_pc	: BIT;
  SIGNAL wdata1	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL wdata2	: BIT_VECTOR(31 DOWNTO 0);
  SIGNAL wadr1	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL wadr2	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL inval_adr1	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL inval_adr2	: BIT_VECTOR(3 DOWNTO 0);
  SIGNAL wen1	: BIT;
  SIGNAL wen2	: BIT;
  SIGNAL wcry	: BIT;
  SIGNAL wzero	: BIT;
  SIGNAL wneg	: BIT;
  SIGNAL wovr	: BIT;
  SIGNAL cspr_wb	: BIT;
  SIGNAL inval1	: BIT;
  SIGNAL inval2	: BIT;
  SIGNAL inval_ovr	: BIT;
  SIGNAL inval_czn	: BIT;
  SIGNAL dec2if_push	: BIT;
  SIGNAL dec2if_full	: BIT;
  SIGNAL dec2exe_push	: BIT;
  SIGNAL dec2exe_full	: BIT;
  SIGNAL fifo_din	: BIT_VECTOR(128 DOWNTO 0);
  SIGNAL fifo_dout	: BIT_VECTOR(128 DOWNTO 0);
  COMPONENT decod_model
  PORT(
  dec_op1	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_op2	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_exe_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_exe_wb	: OUT BIT;
  dec_flag_wb	: OUT BIT;
  dec_mem_data	: OUT BIT_VECTOR(31 DOWNTO 0);
  dec_mem_dest	: OUT BIT_VECTOR(3 DOWNTO 0);
  dec_pre_index	: OUT BIT;
  dec_mem_lw	: OUT BIT;
  dec_mem_lb	: OUT BIT;
  dec_mem_sw	: OUT BIT;
  dec_mem_sb	: OUT BIT;
  dec_shift_lsl	: OUT BIT;
  dec_shift_lsr	: OUT BIT;
  dec_shift_asr	: OUT BIT;
  dec_shift_ror	: OUT BIT;
  dec_shift_rrx	: OUT BIT;
  dec_shift_val	: OUT BIT_VECTOR(4 DOWNTO 0);
  dec_cy	: OUT BIT;
  dec_comp_op1	: OUT BIT;
  dec_comp_op2	: OUT BIT;
  dec_alu_cy	: OUT BIT;
  dec_alu_add	: OUT BIT;
  dec_alu_and	: OUT BIT;
  dec_alu_or	: OUT BIT;
  dec_alu_xor	: OUT BIT;
  exe_res	: IN BIT_VECTOR(31 DOWNTO 0);
  exe_c	: IN BIT;
  exe_v	: IN BIT;
  exe_n	: IN BIT;
  exe_z	: IN BIT;
  exe_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  exe_wb	: IN BIT;
  exe_flag_wb	: IN BIT;
  if_ir	: IN BIT_VECTOR(31 DOWNTO 0);
  if2dec_empty	: IN BIT;
  dec_pop	: OUT BIT;
  mem_res	: IN BIT_VECTOR(31 DOWNTO 0);
  mem_dest	: IN BIT_VECTOR(3 DOWNTO 0);
  mem_wb	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT;
  fifo_dout	: IN BIT_VECTOR(128 DOWNTO 0);
  fifo_din	: OUT BIT_VECTOR(128 DOWNTO 0);
  dec2exe_full	: IN BIT;
  dec2exe_push	: INOUT BIT;
  dec2if_full	: IN BIT;
  dec2if_push	: INOUT BIT;
  inval_czn	: OUT BIT;
  inval_ovr	: OUT BIT;
  inval2	: OUT BIT;
  inval1	: OUT BIT;
  cspr_wb	: OUT BIT;
  wovr	: OUT BIT;
  wneg	: OUT BIT;
  wzero	: OUT BIT;
  wcry	: OUT BIT;
  wen2	: OUT BIT;
  wen1	: OUT BIT;
  inval_adr2	: OUT BIT_VECTOR(3 DOWNTO 0);
  inval_adr1	: OUT BIT_VECTOR(3 DOWNTO 0);
  wadr2	: OUT BIT_VECTOR(3 DOWNTO 0);
  wadr1	: OUT BIT_VECTOR(3 DOWNTO 0);
  wdata2	: OUT BIT_VECTOR(31 DOWNTO 0);
  wdata1	: OUT BIT_VECTOR(31 DOWNTO 0);
  inc_pc	: OUT BIT;
  reg_pcv	: IN BIT;
  reg_pc	: IN BIT_VECTOR(31 DOWNTO 0);
  reg_vv	: IN BIT;
  reg_cznv	: IN BIT;
  ovr	: IN BIT;
  neg	: IN BIT;
  zero	: IN BIT;
  cry	: IN BIT;
  radr3	: OUT BIT_VECTOR(3 DOWNTO 0);
  rdata3	: IN BIT_VECTOR(31 DOWNTO 0);
  rvalid2	: IN BIT;
  radr2	: OUT BIT_VECTOR(3 DOWNTO 0);
  rdata2	: IN BIT_VECTOR(31 DOWNTO 0);
  rvalid1	: IN BIT;
  radr1	: OUT BIT_VECTOR(3 DOWNTO 0);
  rdata1	: IN BIT_VECTOR(31 DOWNTO 0);
  bl_i	: OUT BIT
  );
  END COMPONENT;

  COMPONENT fifo129
  PORT(
  din	: IN BIT_VECTOR(128 DOWNTO 0);
  dout	: OUT BIT_VECTOR(128 DOWNTO 0);
  push	: IN BIT;
  pop	: IN BIT;
  full	: OUT BIT;
  empty	: OUT BIT;
  reset_n	: IN BIT;
  ck	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT fifo32
  PORT(
  din	: IN BIT_VECTOR(31 DOWNTO 0);
  dout	: OUT BIT_VECTOR(31 DOWNTO 0);
  push	: IN BIT;
  pop	: IN BIT;
  full	: OUT BIT;
  empty	: OUT BIT;
  reset_n	: IN BIT;
  ck	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

  COMPONENT reg
  PORT(
  wdata1	: IN BIT_VECTOR(31 DOWNTO 0);
  wadr1	: IN BIT_VECTOR(3 DOWNTO 0);
  wen1	: IN BIT;
  wdata2	: IN BIT_VECTOR(31 DOWNTO 0);
  wadr2	: IN BIT_VECTOR(3 DOWNTO 0);
  wen2	: IN BIT;
  wcry	: IN BIT;
  wzero	: IN BIT;
  wneg	: IN BIT;
  wovr	: IN BIT;
  cspr_wb	: IN BIT;
  rdata1	: OUT BIT_VECTOR(31 DOWNTO 0);
  radr1	: IN BIT_VECTOR(3 DOWNTO 0);
  rvalid1	: OUT BIT;
  rdata2	: OUT BIT_VECTOR(31 DOWNTO 0);
  radr2	: IN BIT_VECTOR(3 DOWNTO 0);
  rvalid2	: OUT BIT;
  rdata3	: OUT BIT_VECTOR(31 DOWNTO 0);
  radr3	: IN BIT_VECTOR(3 DOWNTO 0);
  rvalid3	: OUT BIT;
  cry	: OUT BIT;
  zero	: OUT BIT;
  neg	: OUT BIT;
  ovr	: OUT BIT;
  cznv	: OUT BIT;
  vv	: OUT BIT;
  inval_adr1	: IN BIT_VECTOR(3 DOWNTO 0);
  inval1	: IN BIT;
  inval_adr2	: IN BIT_VECTOR(3 DOWNTO 0);
  inval2	: IN BIT;
  inval_czn	: IN BIT;
  inval_ovr	: IN BIT;
  reg_pc	: OUT BIT_VECTOR(31 DOWNTO 0);
  reg_pcv	: OUT BIT;
  inc_pc	: IN BIT;
  blink	: IN BIT;
  ck	: IN BIT;
  reset_n	: IN BIT;
  vdd	: IN BIT;
  vss	: IN BIT
  );
  END COMPONENT;

BEGIN

  decod_inst : decod_model
  PORT MAP (
    dec_op1 => dec_op1,
    dec_op2 => dec_op2,
    dec_exe_dest => dec_exe_dest,
    dec_exe_wb => dec_exe_wb,
    dec_flag_wb => dec_flag_wb,
    dec_mem_data => dec_mem_data,
    dec_mem_dest => dec_mem_dest,
    dec_pre_index => dec_pre_index,
    dec_mem_lw => dec_mem_lw,
    dec_mem_lb => dec_mem_lb,
    dec_mem_sw => dec_mem_sw,
    dec_mem_sb => dec_mem_sb,
    dec_shift_lsl => dec_shift_lsl,
    dec_shift_lsr => dec_shift_lsr,
    dec_shift_asr => dec_shift_asr,
    dec_shift_ror => dec_shift_ror,
    dec_shift_rrx => dec_shift_rrx,
    dec_shift_val => dec_shift_val,
    dec_cy => dec_cy,
    dec_comp_op1 => dec_comp_op1,
    dec_comp_op2 => dec_comp_op2,
    dec_alu_cy => dec_alu_cy,
    dec_alu_add => dec_alu_add,
    dec_alu_and => dec_alu_and,
    dec_alu_or => dec_alu_or,
    dec_alu_xor => dec_alu_xor,
    exe_res => exe_res,
    exe_c => exe_c,
    exe_v => exe_v,
    exe_n => exe_n,
    exe_z => exe_z,
    exe_dest => exe_dest,
    exe_wb => exe_wb,
    exe_flag_wb => exe_flag_wb,
    if_ir => if_ir,
    if2dec_empty => if2dec_empty,
    dec_pop => dec_pop,
    mem_res => mem_res,
    mem_dest => mem_dest,
    mem_wb => mem_wb,
    ck => ck,
    reset_n => reset_n,
    vdd => vdd,
    vss => vss,
    fifo_dout => fifo_dout,
    fifo_din => fifo_din,
    dec2exe_full => dec2exe_full,
    dec2exe_push => dec2exe_push,
    dec2if_full => dec2if_full,
    dec2if_push => dec2if_push,
    inval_czn => inval_czn,
    inval_ovr => inval_ovr,
    inval2 => inval2,
    inval1 => inval1,
    cspr_wb => cspr_wb,
    wovr => wovr,
    wneg => wneg,
    wzero => wzero,
    wcry => wcry,
    wen2 => wen2,
    wen1 => wen1,
    inval_adr2 => inval_adr2,
    inval_adr1 => inval_adr1,
    wadr2 => wadr2,
    wadr1 => wadr1,
    wdata2 => wdata2,
    wdata1 => wdata1,
    inc_pc => inc_pc,
    reg_pcv => reg_pcv,
    reg_pc => reg_pc,
    reg_vv => reg_vv,
    reg_cznv => reg_cznv,
    ovr => ovr,
    neg => neg,
    zero => zero,
    cry => cry,
    radr3 => radr3,
    rdata3 => rdata3,
    rvalid2 => rvalid2,
    radr2 => radr2,
    rdata2 => rdata2,
    rvalid1 => rvalid1,
    radr1 => radr1,
    rdata1 => rdata1,
    bl_i => bl_i
  );
  dec2if : fifo32
  PORT MAP (
    din(31 downto 0) => reg_pc,
    dout(31 downto 0) => dec_pc,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    empty => dec2if_empty,
    pop => if_pop,
    full => dec2if_full,
    push => dec2if_push
  );
  dec2exec : fifo129
  PORT MAP (
    din(128 downto 0) => fifo_din,
    dout(128 downto 0) => fifo_dout,
    vss => vss,
    vdd => vdd,
    ck => ck,
    reset_n => reset_n,
    empty => dec2exe_empty,
    pop => exe_pop,
    full => dec2exe_full,
    push => dec2exe_push
  );
  reg_bank : reg
  PORT MAP (
    wdata1 => wdata1,
    wadr1 => wadr1,
    wdata2 => wdata2,
    wadr2 => wadr2,
    rdata1 => rdata1,
    radr1 => radr1,
    rdata2 => rdata2,
    radr2 => radr2,
    rdata3 => rdata3,
    radr3 => radr3,
    inval_adr1 => inval_adr1,
    inval_adr2 => inval_adr2,
    reg_pc => reg_pc,
    vss => vss,
    vdd => vdd,
    reset_n => reset_n,
    ck => ck,
    blink => bl_i,
    inc_pc => inc_pc,
    reg_pcv => reg_pcv,
    inval_ovr => inval_ovr,
    inval_czn => inval_czn,
    inval2 => inval2,
    inval1 => inval1,
    vv => reg_vv,
    cznv => reg_cznv,
    ovr => ovr,
    neg => neg,
    zero => zero,
    cry => cry,
    rvalid3 => rvalid3,
    rvalid2 => rvalid2,
    rvalid1 => rvalid1,
    cspr_wb => cspr_wb,
    wovr => wovr,
    wneg => wneg,
    wzero => wzero,
    wcry => wcry,
    wen2 => wen2,
    wen1 => wen1
  );
END VST;
